import os
import pickle
from random import randint
from df_utils import *
from file_utils import *
import random
import argparse


parser = argparse.ArgumentParser(description='Analyze node2vec embedding file.')
parser.add_argument('--outprefix', help='Prefix for files generated. E.g. /path/to/output/directory/fileIdentifier')
parser.add_argument('--idx_to_name', help='Full path to node_idx_to_name.dict.pkl file generated by preprocess_node2vec.py')
parser.add_argument('--emd', help='Full path to node2vec embedding file.')
parser.add_argument('--prefix', help='Prefix for output files')
parser.add_argument ('--gene_list', help='list of genes to analyze')
args = parser.parse_args()

outputdir = args.outprefix
emd = args.emd
prefix = args.prefix

emd = pd.read_table(emd, skiprows=1, header=None, sep=' ', index_col=0)

with open(args.idx_to_name, 'rb') as f:
    idx_to_name = pickle.load(f)
emd.index = [idx_to_name[x] for x in emd.index.values]
with open('{}/{}.gname.pkl'.format(outputdir, prefix), 'wb') as f:
    pickle.dump(emd, f)

# get genes in bioplex that are also in HPA (661 genes total)
hek_genes = np.load(args.gene_list)
with open('{}/{}.gname.pkl'.format(outputdir, prefix), 'rb') as f:
    df = pickle.load(f)
df = df.loc[hek_genes]
label = prefix

# determine similarities (cosine, Manhattan, Pearson, Spearman, Kendall, Euclidean)
cos_sim = cosine_similarity_scaled(df)
with open('{}/{}.cosine.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(cos_sim, f)

mht_sim = manhattan_similarity(df)
with open('{}/{}.manhattan.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(mht_sim, f)

euc_sim = euclidean_similarity(df)
with open('{}/{}.euclidean.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(euc_sim, f)

pcorr = pearson_scaled(df)
with open('{}/{}.pearson.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(pcorr, f)

scorr = spearman_scaled(df)
with open('{}/{}.spearman.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(scorr, f)

kcorr = kendall_scaled(df)
with open('{}/{}.kendall.scaled.pkl'.format(outputdir, label), 'wb') as f:
    pickle.dump(kcorr, f)